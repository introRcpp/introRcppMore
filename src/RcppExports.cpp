// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// addOne
void addOne(Rcpp::IntegerVector x);
RcppExport SEXP _introRcppMore_addOne(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    addOne(x);
    return R_NilValue;
END_RCPP
}
// arrays
void arrays();
RcppExport SEXP _introRcppMore_arrays() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    arrays();
    return R_NilValue;
END_RCPP
}
// countZeroes
int countZeroes(Rcpp::IntegerVector x);
RcppExport SEXP _introRcppMore_countZeroes(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(countZeroes(x));
    return rcpp_result_gen;
END_RCPP
}
// exampleD2
void exampleD2();
RcppExport SEXP _introRcppMore_exampleD2() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    exampleD2();
    return R_NilValue;
END_RCPP
}
// demonstrateSwap3
void demonstrateSwap3(int a, int b);
RcppExport SEXP _introRcppMore_demonstrateSwap3(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    demonstrateSwap3(a, b);
    return R_NilValue;
END_RCPP
}
// derivSquare
void derivSquare(double x);
RcppExport SEXP _introRcppMore_derivSquare(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    derivSquare(x);
    return R_NilValue;
END_RCPP
}
// intLog2
int intLog2(int a);
RcppExport SEXP _introRcppMore_intLog2(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(intLog2(a));
    return rcpp_result_gen;
END_RCPP
}
// exampleTemplate
void exampleTemplate();
RcppExport SEXP _introRcppMore_exampleTemplate() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    exampleTemplate();
    return R_NilValue;
END_RCPP
}
// exempleTemplate2
NumericVector exempleTemplate2(NumericVector x, NumericVector y);
RcppExport SEXP _introRcppMore_exempleTemplate2(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(exempleTemplate2(x, y));
    return rcpp_result_gen;
END_RCPP
}
// incrementAlpha
void incrementAlpha(List x);
RcppExport SEXP _introRcppMore_incrementAlpha(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    incrementAlpha(x);
    return R_NilValue;
END_RCPP
}
// pointers
void pointers();
RcppExport SEXP _introRcppMore_pointers() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    pointers();
    return R_NilValue;
END_RCPP
}
// demoQuadratic
void demoQuadratic(double a, double b, double c);
RcppExport SEXP _introRcppMore_demoQuadratic(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    demoQuadratic(a, b, c);
    return R_NilValue;
END_RCPP
}
// references
void references();
RcppExport SEXP _introRcppMore_references() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    references();
    return R_NilValue;
END_RCPP
}
// specials
Rcpp::NumericVector specials();
RcppExport SEXP _introRcppMore_specials() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(specials());
    return rcpp_result_gen;
END_RCPP
}
// demonstrateSwap
void demonstrateSwap(int a, int b);
RcppExport SEXP _introRcppMore_demonstrateSwap(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    demonstrateSwap(a, b);
    return R_NilValue;
END_RCPP
}
// demonstrateSwap2
void demonstrateSwap2(int a, int b);
RcppExport SEXP _introRcppMore_demonstrateSwap2(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    demonstrateSwap2(a, b);
    return R_NilValue;
END_RCPP
}
// tests
void tests(double x);
RcppExport SEXP _introRcppMore_tests(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    tests(x);
    return R_NilValue;
END_RCPP
}
// twice
Rcpp::NumericVector twice(Rcpp::NumericVector x);
RcppExport SEXP _introRcppMore_twice(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(twice(x));
    return rcpp_result_gen;
END_RCPP
}
// twice2
Rcpp::NumericVector twice2(Rcpp::NumericVector x);
RcppExport SEXP _introRcppMore_twice2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(twice2(x));
    return rcpp_result_gen;
END_RCPP
}
// twice3
Rcpp::NumericVector twice3(Rcpp::NumericVector x);
RcppExport SEXP _introRcppMore_twice3(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(twice3(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_introRcppMore_addOne", (DL_FUNC) &_introRcppMore_addOne, 1},
    {"_introRcppMore_arrays", (DL_FUNC) &_introRcppMore_arrays, 0},
    {"_introRcppMore_countZeroes", (DL_FUNC) &_introRcppMore_countZeroes, 1},
    {"_introRcppMore_exampleD2", (DL_FUNC) &_introRcppMore_exampleD2, 0},
    {"_introRcppMore_demonstrateSwap3", (DL_FUNC) &_introRcppMore_demonstrateSwap3, 2},
    {"_introRcppMore_derivSquare", (DL_FUNC) &_introRcppMore_derivSquare, 1},
    {"_introRcppMore_intLog2", (DL_FUNC) &_introRcppMore_intLog2, 1},
    {"_introRcppMore_exampleTemplate", (DL_FUNC) &_introRcppMore_exampleTemplate, 0},
    {"_introRcppMore_exempleTemplate2", (DL_FUNC) &_introRcppMore_exempleTemplate2, 2},
    {"_introRcppMore_incrementAlpha", (DL_FUNC) &_introRcppMore_incrementAlpha, 1},
    {"_introRcppMore_pointers", (DL_FUNC) &_introRcppMore_pointers, 0},
    {"_introRcppMore_demoQuadratic", (DL_FUNC) &_introRcppMore_demoQuadratic, 3},
    {"_introRcppMore_references", (DL_FUNC) &_introRcppMore_references, 0},
    {"_introRcppMore_specials", (DL_FUNC) &_introRcppMore_specials, 0},
    {"_introRcppMore_demonstrateSwap", (DL_FUNC) &_introRcppMore_demonstrateSwap, 2},
    {"_introRcppMore_demonstrateSwap2", (DL_FUNC) &_introRcppMore_demonstrateSwap2, 2},
    {"_introRcppMore_tests", (DL_FUNC) &_introRcppMore_tests, 1},
    {"_introRcppMore_twice", (DL_FUNC) &_introRcppMore_twice, 1},
    {"_introRcppMore_twice2", (DL_FUNC) &_introRcppMore_twice2, 1},
    {"_introRcppMore_twice3", (DL_FUNC) &_introRcppMore_twice3, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_introRcppMore(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
